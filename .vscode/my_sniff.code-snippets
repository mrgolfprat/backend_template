{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"modl": {
		"prefix": "modl",
		"body": [
			"/* สําหรับเชื่อมต่อ Database */",
			"const knex = require('../../knex')",
			"",
			"class ${TM_FILENAME_BASE}{",
			" $1",
			"}",
			"",
			"module.exports = new ${TM_FILENAME_BASE}()"
		]
	},
	"route": {
		"prefix": "rout",
		"body": [
			"/* สําหรับเชื่อต่อ Route */",
			"const { Router } = require('express')",
			"const { check } = require('express-validator/check')",
			"const { validator } = require('../../middleware/validator')",
			"const router = Router();",
			"",
			"",
			"module.exports = router"
		]
	},
	"cont": {
		"prefix": "cont",
		"body": [
			"/* สําหรับสร้าง Controller */",
			"const { success, failed } = require('../../config/response')",
			"const  $1 = require('')",
			"",
			"class ${TM_FILENAME_BASE}{",
			"",
			"}",
			"",
			"module.exports = new ${TM_FILENAME_BASE}()"
		]
	},
	"controller function": {
		"prefix": "cfn",
		"body": [
			"async $1(req, res) {",
			"try {",
			"",
			"success(res, '')",
			"} catch (error) {",
			"failed(res, '')",
			"}",
			"}"
		]
	},
	"get": {
		"prefix": "get",
		"body": "router.get('$1', Controller)"
	},
	"post": {
		"prefix": "post",
		"body": [
			"router.post('$1', [], validator(), Controller)",
		]
	},
	"cs": {
		"prefix": "cs",
		"body": "check('$1').isString().withMessage(''),"
	},
	"cn": {
		"prefix": "cn",
		"body": "check('$1').isNumeric().withMessage(''),"
	},
	"cm": {
		"prefix": "cm",
		"body": "check('$1').matches(//).withMessage(''),"
	},
	"migrate": {
		"prefix": "migr",
		"body": [
			"const knex = require('../../knex')",
			"exports.up = function (_, Promise) {",
			"return Promise.resolve(knex.schema.createTable('$0', table => {",
			"table.increments('_id').primary()",
			"}))",
			"};",
			"",
			"exports.down = function (_, Promise) {",
			"return Promise.resolve(knex.schema.dropTable('$0'))",
			"};",
		]
	},
	"console.log": {
		"prefix": "lg",
		"body": "console.log($0)"
	}
}